(define (domain DarkDungeon)
(:requirements :typing :negative-preconditions :action-costs)
(:types room item - object
        sword - item
)

(:predicates (hero_at ?r - room)
             (monster_at ?r - room)
             (trap_at ?r - room)
             ;(item_at ?i - item ?r - room)
             ;(carries ?i - item)
             (sword_at ?r - room)
             (has_sword)
             (empty_handed)
             (connected ?r1 ?r2 - room)
             (alive)
)

(:functions (total-cost))

(:action move_emptyhanded
:parameters (?r1 ?r2 - room)
:precondition (and (alive)
                   (empty_handed)
                   (connected ?r1 ?r2)
                   (hero_at ?r1)
                   (not (trap_at ?r1))
                   (not (monster_at ?r2))
             )
:effect (and (not (hero_at ?r1))
             (hero_at ?r2)
             (increase (total-cost) 10)
        )
)

(:action move_withsword
:parameters (?r1 ?r2 - room)
:precondition (and (alive)
                   (connected ?r1 ?r2)
                   (hero_at ?r1)
                   (not (trap_at ?r1))
                   (not (trap_at ?r2))
                   (has_sword)
              )
:effect (and (not (hero_at ?r1))
             (hero_at ?r2)
             (not (monster_at ?r2))
             (increase (total-cost) 1)
        )
)


(:action pickup_sword
:parameters (?r - room)
:precondition (and (alive)
                   (hero_at ?r)
                   (sword_at ?r)
                   (not (trap_at ?r))
              )
:effect (and (not (sword_at ?r))
             (has_sword)
             (not (empty_handed))
             (increase (total-cost) 1)
        )
)

(:action drop_sword
:parameters (?r - room)
:precondition (and (alive)
                   (hero_at ?r)
                   (has_sword)
                   (not (trap_at ?r))
                   (not (monster_at ?r))
              )
:effect (and (sword_at ?r)
             (not (has_sword))
             (empty_handed)
             (increase (total-cost) 10)
        )
)

(:action disarm
:parameters (?r - room)
:precondition (and (alive)
                   (hero_at ?r)
                   (trap_at ?r)
                   (empty_handed)
              )
:effect (and (not (trap_at ?r))
             (increase (total-cost) 10)          
        )
)

)
